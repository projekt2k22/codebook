{
  
    
        "post0": {
            "title": "Find root vertex of a graph",
            "content": "# Optional !pip install networkx !pip install matplotlib . Problem . Given a directed graph, find a root vertex of the graph. The root vertex $ mathcal{v}$ is defined as any vertex $ mathcal{v} in mathcal{G(V, E)}$ such that all other vertex in $ mathcal{G}$ can be reached. . For example in the graph below, the vertex 4 is a root vertex as all other vertex can be reached from 4 . import networkx as nx import matplotlib.pyplot as plt G = nx.DiGraph() edges = [(0, 1), (1, 2), (2, 3), (3, 0), (4, 3), (4, 5), (5, 0)] G.add_edges_from(edges) nx.draw(G, with_labels=True, font_weight=&#39;bold&#39;) # total number of nodes in the graph N = 6 . . Solution . This can be solved by doing depth first search (DFS) on the graph and keeping track of the node with highest departure time. The vertex with highest departure time could be the root node if all other node can be reached by doing DFS starting that vertex . from typing import List from typing import Tuple class Graph: def __init__(self, num_vertices: int, edges: List[Tuple[int, int]]) -&gt; None: self.num_vertices = num_vertices self.adj = [[] for i in range(self.num_vertices)] for edge in edges: self.add_edge(edge[0], edge[1]) def add_edge(self, src: int, dest: int) -&gt; None: self.adj[src].append(dest) . def depth_first_search(g: Graph, start_vertex_id: int, visited:List[bool]): visited[start_vertex_id] = True for vertex in g.adj[start_vertex_id]: if not visited[vertex]: depth_first_search(g, vertex, visited) . def find_root_vertex(graph: Graph) -&gt; int: visited = [False] * graph.num_vertices # last visited vertex in DFS has the highest departure time last_visited = -1 for i in range(graph.num_vertices): if not visited[i]: last_visited = i depth_first_search(graph, i, visited) # Re-run DFS starting last_visited node as the root # to verify if all vertex can be reached visited = [False] * graph.num_vertices depth_first_search(graph, last_visited, visited) # verifying if all nodes has been visited for i in range(graph.num_vertices): if not visited[i]: return -1 # returning the root candidate return last_visited . # build a directed graph from the given edges graph = Graph(N, edges) # find the root vertex in the graph root = find_root_vertex(graph) if root != -1: print(f&quot;The root vertex is {root}&quot;) else: print(&quot;The root vertex does not exist&quot;) . . The root vertex is 4 .",
            "url": "https://projekt2k22.github.io/codebook/graph/dfs/2021/02/17/Root-of-a-graph.html",
            "relUrl": "/graph/dfs/2021/02/17/Root-of-a-graph.html",
            "date": " • Feb 17, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Decoding digits",
            "content": "Problem . Given a positive number and a mapping table shown below . 1 -&gt; &#39;A&#39; 2 -&gt; &#39;B&#39; ... ... 26 -&gt; &#39;Z&#39; . Count number of ways a positive number can be decoded. Example . Input 128 . This can be decoded into [ABH, LH] . Output 2 . Solution . Brute force . The problem $T(n)$ can be broken down to two subproblem. . $T(n-1)$ if the last digit lies between $[1-9]$ | $T(n-2)$ if the last two digit lies between $[10-26]$ | So the solution is sum of solution of subproblem. i.e. $$ T(n) = T(n-1) + T(n-2)$$ . def decode_seq_brute_force(seq, start_pos:int) -&gt; int: # base case if start_pos == 0 or start_pos == 1: return 1 total_count = 0 # subproblem T(n-1) if &#39;1&#39; &lt;= seq[start_pos - 1] &lt;= &#39;9&#39;: total_count += decode_seq_brute_force(seq, start_pos - 1) # subprobelm T(n - 2) if seq[start_pos - 2] == &#39;1&#39; or (seq[start_pos - 2] == &#39;2&#39; and seq[start_pos - 1] &lt;= &#39;6&#39;): total_count += decode_seq_brute_force(seq, start_pos - 2) return total_count . Time and space complexity is exponential in n as subproblem are repeatedly/recursively solved and each recurssion requires its call stack . Unit test . def test_decode(f): # 128 -&gt; [ABH, LH] assert f(str(128), 3) == 2 # 123 -&gt; [ABC, AW, LC] assert f(str(123), 3) == 3 # 1221 -&gt; [ABBA, ABU, AVA, LVA, LU] assert f(str(1221), 4) == 5 test_decode(decode_seq_brute_force) . . Dynamic programing . Using bottom up approach we can solve smaller problem first. The solution to larger problem become trivial if subproblem is already solved as it requires adding subproblem solution [$ theta(n)$] . def decode_seq(num: int, dummy: None) -&gt; int: seq = str(num) T = [0] * (len(seq) + 1) # base case T[0] = T[1] = 1 for start_pos in range(2, len(seq) + 1): if &#39;1&#39; &lt;= seq[start_pos - 1] &lt;= &#39;9&#39;: T[start_pos] = T[start_pos - 1] if seq[start_pos - 2] == &#39;1&#39; or (seq[start_pos - 2] == &#39;2&#39; and seq[start_pos - 1] &lt;= &#39;6&#39;): T[start_pos] += T[start_pos - 2] return T[-1] . test_decode(decode_seq) . .",
            "url": "https://projekt2k22.github.io/codebook/dynamic%20programming/counting/2021/02/16/decoding-digits.html",
            "relUrl": "/dynamic%20programming/counting/2021/02/16/decoding-digits.html",
            "date": " • Feb 16, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Evaluate binary expression tree",
            "content": "Problem . A binary expression tree is a binary tree where the operator are stored in the tree&#39;s internal nodes and the leaves contians constants. Assume each node in the tree has zero or two children . . Solution . This can be solved by applyling the operator at the root to values obtained by recursively evaluating left and right subtrees. . Terminating condition . if the root is null return 0 | if the node is leaf, return the value of the node | Recurssion . recurse to evaluate left subtree | recurse to evaluate right subtree | apply operator to the result from left and right subtree | class TreeNode: def __init__(self, val, left=None, right=None): self.val = val self.left = left self.right = right def is_leaf(self) -&gt; bool: return self.left is None and self.right is None # string utility function for debugging and unit test def __str__(self) -&gt; str: if self.is_leaf(): return str(self.val) else: return f&quot;({str(self.left)} {str(self.val)} {str(self.right)})&quot; . . def apply_binary_op(operator, l_operand, r_operand): if operator == &#39;/&#39;: return l_operand / r_operand elif operator == &#39;*&#39;: return l_operand * r_operand elif operator == &#39;+&#39;: return l_operand + r_operand elif operator == &#39;-&#39;: return l_operand - r_operand else: raise ValueError(f&quot;Operator &#39;{operator}&#39; not supported&#39;&quot;) . . def evaluate_binary_expression_tree(root:TreeNode): # terminating conditions if not root: return 0 if root.is_leaf(): return eval(root.val) # recursively solve right and left subtree l_operand = evaluate_binary_expression_tree(root.left) r_operand = evaluate_binary_expression_tree(root.right) # apply operator to result from right and left subtrees return apply_binary_op(root.val, l_operand, r_operand) . Unit test . Build the tree from above fig . root = TreeNode(&#39;+&#39;) root.left = TreeNode(&#39;*&#39;) root.right = TreeNode(&#39;/&#39;) root.left.left = TreeNode(&#39;-&#39;) root.left.right = TreeNode(&#39;5&#39;) root.right.left = TreeNode(&#39;21.3&#39;) root.right.right = TreeNode(&#39;7&#39;) root.left.left.left = TreeNode(&#39;10&#39;) root.left.left.right = TreeNode(&#39;5&#39;) . print(f&quot;{root} = {evaluate_binary_expression_tree(root)}&quot;) . (((10 - 5) * 5) + (21.3 / 7)) = 28.042857142857144 . . print(f&quot;{root} = {eval(str(root))}&quot;) . (((10 - 5) * 5) + (21.3 / 7)) = 28.042857142857144 . .",
            "url": "https://projekt2k22.github.io/codebook/tree/coding%20practice/easy/2021/02/12/Evaluate-binary-expression-tree.html",
            "relUrl": "/tree/coding%20practice/easy/2021/02/12/Evaluate-binary-expression-tree.html",
            "date": " • Feb 12, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Counting Derangements",
            "content": "Problem . Suppose that a professor gave a test to 4 students – A, B, C, and D – and wants to let them grade each other&#39;s tests. Of course, no student should grade his or her own test. How many ways could the professor hand the tests back to the students for grading, such that no student received his or her own test back? (Wikipedia contributors, 2021) . Solution . Counting the derangements of a set amounts to what is known as the hat-check problem, in which one considers the number of ways in which n hats (call them $h_1$ through $h_n$) can be returned to n people ($P_1$ through $P_n$) such that no hat makes it back to its owner. . Each person may receive any of the $n − 1$ hats that is not their own. Call whichever hat $P_1$ receives $h_i$ and consider $h_i$’s owner: $P_i$ receives either $P_1$&#39;s hat, $h_1$, or some other. Accordingly, the problem splits into two possible cases: . $P_i$ receives a hat other than $h_1$. This case is equivalent to solving the problem with $n − 1$ people and $n − 1$ hats because for each of the $n − 1$ people besides $P_1$ there is exactly one hat from among the remaining $n − 1$ hats that they may not receive (for any $P_j$ besides $P_i$, the unreceivable hat is $h_j$, while for $P_i$ it is $h_1$). . | $P_i$ receives $h_1$. In this case the problem reduces to $n − 2$ people and $n − 2$ hats. . | For each of the $n − 1$ hats that $P_1$ may receive, the number of ways that $P_2, dots ,P_n$ may all receive hats is the sum of the counts for the two cases. This gives us the solution to the hat-check problem: stated algebraically, the number !n of derangements of an n-element set is . $$!n = (n − 1) (!(n − 1) + !(n − 2)),$$ . where !0 = 1 and !1 = 0. . def derangements(n): # create an auxiliary array to store solutions to the subproblems T = [0] * (n + 1) # base case T[1] = 0 T[2] = 1 # fill the auxiliary array `T` in a bottom-up manner using the recurrence relation for i in range(3, n + 1): T[i] = (i - 1) * (T[i - 1] + T[i - 2]) # return the total number of derangements of an n–element set return T[n] . n = 4 print(f&quot;The total number of derangements of a {n}–element set is&quot;, derangements(n)) . The total number of derangements of a 4–element set is 9 . . Refrences . Wikipedia contributors. (2021). Derangement — Wikipedia, The Free Encyclopedia. https://en.wikipedia.org/wiki/Derangement | .",
            "url": "https://projekt2k22.github.io/codebook/jupyter/dynamic%20programming/counting/combinatorial/2021/02/11/Counting-Derangements.html",
            "relUrl": "/jupyter/dynamic%20programming/counting/combinatorial/2021/02/11/Counting-Derangements.html",
            "date": " • Feb 11, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://projekt2k22.github.io/codebook/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://projekt2k22.github.io/codebook/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://projekt2k22.github.io/codebook/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://projekt2k22.github.io/codebook/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

  
  

}